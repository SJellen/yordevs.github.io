{"version":3,"sources":["webpack://yordevs-site/./src/components/TextLink.js","webpack://yordevs-site/./src/components/PostLink.js","webpack://yordevs-site/./src/pages/blog.js"],"names":["color","config","font","StyledTextLink","styled","Link","accent","weight","semibold","background","to","className","children","test","as","href","target","rel","Title","bold","Details","Body","post","frontmatter","author","date","slug","title","excerpt","TextLink","Posts","data","allMarkdownRemark","edges","filter","edge","node","map","key","id","Layout"],"mappings":"wJAOQA,EAAgBC,UAATC,EAASD,SAElBE,GAAiBC,QAAOC,QAAV,2EAAGD,CAAH,mJAETJ,EAAMM,OAIAJ,EAAKK,OAAOC,SAOXR,EAAMM,OACXN,EAAMS,YA2BnB,IAvBiB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAGjC,MAFmB,YAAYC,KAAKH,GAIhC,gBAACP,EAAD,CAAgBO,GAAIA,EAAIC,UAAWA,GAChCC,GAML,gBAACT,EAAD,CACEW,GAAG,IACHC,KAAML,EACNM,OAAO,SACPC,IAAI,sBACJN,UAAWA,GACVC,K,wHCtCCV,EAAgBD,SAAVD,EAAUC,UAElBiB,EAAQd,mBAAH,2DAAGA,CAAH,wCAIQF,EAAKK,OAAOY,MAIzBC,EAAUhB,kBAAH,6DAAGA,CAAH,wBAIPiB,EAAOjB,oBAAH,0DAAGA,CAAH,oDACoBJ,EAAMM,QAqBpC,EAjBiB,SAAC,GAAD,QACfgB,KADe,IAEbC,YAAeC,EAFF,EAEEA,OAAQC,EAFV,EAEUA,KAAMC,EAFhB,EAEgBA,KAAMC,EAFtB,EAEsBA,MACnCC,EAHa,EAGbA,QAHa,OAMf,gBAACP,EAAD,KACE,gBAACH,EAAD,KACE,gBAACW,EAAA,EAAD,CAAUnB,GAAIgB,GAAOC,IAEvB,gBAACP,EAAD,KACGI,EADH,OACeC,GAEf,yBAAIG,K,SCfR,EAjBiB,SAAC,GAIX,IACCE,EADF,EAHJC,KACEC,kBAAqBC,MAIpBC,QAAO,SAACC,GAAD,QAAYA,EAAKC,KAAKb,YAAYE,QACzCY,KAAI,SAACF,GAAD,OAAU,gBAAC,EAAD,CAAUG,IAAKH,EAAKC,KAAKG,GAAIjB,KAAMa,EAAKC,UAEzD,OACE,gBAACI,EAAA,EAAD,CAAQb,MAAM,QACZ,kCACCG","file":"component---src-pages-blog-js-846c7f9f101fa03e7374.js","sourcesContent":["/* eslint-disable indent */\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nimport config from \"../theme/config\";\nconst { color, font } = config;\n\nconst StyledTextLink = styled(Link)`\n  text-decoration: none;\n  color: ${color.accent};\n\n  transition: all 0.15s ease;\n\n  font-weight: ${font.weight.semibold};\n\n  border-radius: 2px;\n\n  &:hover,\n  &:focus,\n  &:active {\n    background: ${color.accent};\n    color: ${color.background};\n  }\n`;\n\nconst TextLink = ({ to, className, children }) => {\n  const isInternal = /^\\/(?!\\/)/.test(to);\n\n  if (isInternal) {\n    return (\n      <StyledTextLink to={to} className={className}>\n        {children}\n      </StyledTextLink>\n    );\n  }\n\n  return (\n    <StyledTextLink\n      as=\"a\"\n      href={to}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className={className}>\n      {children}\n    </StyledTextLink>\n  );\n};\n\nexport default TextLink;\n\nTextLink.propTypes = {\n  to: PropTypes.string,\n  children: PropTypes.node,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport TextLink from \"./TextLink\";\n\nimport config from \"../theme/config\";\nconst { font, color } = config;\n\nconst Title = styled.h2`\n  margin-bottom: 0;\n\n  a {\n    font-weight: ${font.weight.bold};\n  }\n`;\n\nconst Details = styled.p`\n  font-style: italic;\n`;\n\nconst Body = styled.div`\n  border-bottom: 1px dashed ${color.accent};\n  margin-bottom: 1em;\n`;\n\nconst PostLink = ({\n  post: {\n    frontmatter: { author, date, slug, title },\n    excerpt,\n  },\n}) => (\n  <Body>\n    <Title>\n      <TextLink to={slug}>{title}</TextLink>\n    </Title>\n    <Details>\n      {author} on {date}\n    </Details>\n    <p>{excerpt}</p>\n  </Body>\n);\n\nexport default PostLink;\n\nPostLink.propTypes = {\n  author: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string,\n  frontmatter: PropTypes.object.isRequired,\n  post: PropTypes.object.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\n\nimport PostLink from \"../components/PostLink\";\nimport Layout from \"../components/Layout\";\n\nconst BlogPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const Posts = edges\n    .filter((edge) => !!edge.node.frontmatter.date)\n    .map((edge) => <PostLink key={edge.node.id} post={edge.node} />);\n\n  return (\n    <Layout title=\"Blog\">\n      <h1>Blog</h1>\n      {Posts}\n    </Layout>\n  );\n};\n\nexport default BlogPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/posts/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 200)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n            title\n            author\n          }\n        }\n      }\n    }\n  }\n`;\n\nBlogPage.propTypes = {\n  data: PropTypes.object,\n};\n"],"sourceRoot":""}